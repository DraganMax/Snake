{"version":3,"sources":["../src/engine/Configuration.ts","../src/engine/Cell.ts","../src/engine/Grid.ts","../src/engine/Snake.ts","../src/engine/Game.ts","../src/GameUI.ts"],"names":[],"mappings":"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","file":"GameUI.d57c2e73.js","sourceRoot":"..\\static","sourcesContent":["export const CELLS_HORIZONTAL = 80;\r\nexport const CELLS_VERTICAL = 40;\r\nexport const SPEED = 100;\r\nexport const MAX_LEVEL = 10;\r\n\r\nexport interface Configuration {\r\n  level: number;\r\n  speed: number;\r\n  nbCellsX: number;\r\n  nbCellsY: number;\r\n  width: number;\r\n  height: number;\r\n  cellWidth: number;\r\n  cellHeight: number;\r\n  apples: number;\r\n}\r\n","export class Cell {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n","import { Cell } from \"./Cell\";\r\nimport { Configuration, CELLS_HORIZONTAL, CELLS_VERTICAL } from \"./Configuration\";\r\n\r\nexport class Grid {\r\n  private configuration: Configuration;\r\n  apples = [\r\n    new Cell(33, 22),\r\n    new Cell(35, 22),\r\n    new Cell(37, 22),\r\n    new Cell(39, 22),\r\n    new Cell(41, 22)\r\n  ];\r\n\r\n  constructor(configuration: Configuration) {\r\n    this.configuration = configuration;\r\n  }\r\n\r\n  seed(): void {\r\n    for (var i = 0; i < 5; i++) {\r\n      this.apples.push(new Cell(Math.floor(Math.random() * CELLS_HORIZONTAL), Math.floor(Math.random() * CELLS_VERTICAL)))\r\n    }\r\n  }\r\n\r\n  isAppleInside(cell: Cell): boolean {\r\n    return this.apples.find(apples => apples.x === cell.x && apples.y === cell.y) !== undefined;\r\n  }\r\n\r\n  removeApple(cell: Cell): void {\r\n    const apple = this.apples.find(apple => apple.x === cell.x && apple.y === cell.y)!\r\n    const i = this.apples.indexOf(apple)\r\n    this.apples.splice(i, 1)\r\n  }\r\n\r\n  isDone(): boolean {\r\n    if (this.apples.length === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getApples(): Cell[] {\r\n    return this.apples\r\n  }\r\n}\r\n","import { Cell } from \"./Cell\";\r\nimport { Direction } from \"./Direction\";\r\n\r\nexport class Snake {\r\n  head = new Cell(2, 0);\r\n  tail = [new Cell(0, 0), new Cell(1, 0)];\r\n  direction: Direction = 'Right'\r\n  tailSize = 2\r\n\r\n  setDirection(direction: Direction) {\r\n    if (direction === 'Left' && this.isSnake(new Cell(this.head.x - 1, this.head.y))) {\r\n      this.direction = this.direction;\r\n    }\r\n    else if (direction === 'Right' && this.isSnake(new Cell(this.head.x + 1, this.head.y))) {\r\n      this.direction = this.direction;\r\n    }\r\n    else if (direction === 'Up' && this.isSnake(new Cell(this.head.x, this.head.y - 1))) {\r\n      this.direction = this.direction;\r\n    }\r\n    else if (direction === 'Down' && this.isSnake(new Cell(this.head.x, this.head.y + 1))) {\r\n      this.direction = this.direction;\r\n    }\r\n    else {\r\n        this.direction = direction\r\n    }\r\n    \r\n  }\r\n\r\n  move() {\r\n    this.tail.push(this.head)\r\n    if (this.tailSize < this.tail.length) {\r\n      this.tail.shift()\r\n    }\r\n    if (this.direction === 'Right') {\r\n      this.head = new Cell(this.head.x + 1, this.head.y);\r\n    }\r\n    else if (this.direction === 'Down') {\r\n      this.head = new Cell(this.head.x, this.head.y + 1);\r\n    }\r\n    else if (this.direction === 'Up') {\r\n      this.head = new Cell(this.head.x, this.head.y - 1);\r\n    }\r\n    else if (this.direction === 'Left') {\r\n      this.head = new Cell(this.head.x - 1, this.head.y);\r\n    }\r\n  }\r\n\r\n  grow() {\r\n    this.tailSize += 3\r\n  }\r\n\r\n  getHead(): Cell {\r\n    return this.head;\r\n  }\r\n\r\n  isSnake(cell: Cell): boolean {\r\n    for (var i  = 0; i < this.tail.length; i++) {\r\n      if (cell.x === this.tail[i].x && cell.y === this.tail[i].y){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getDirection(): Direction {\r\n    return this.direction\r\n  }\r\n\r\n  getTail(): Cell[] {\r\n    return this.tail;\r\n  }\r\n}\r\n","import { Grid } from \"./Grid\";\r\nimport { Snake } from \"./Snake\";\r\nimport { Configuration, MAX_LEVEL } from \"./Configuration\";\r\nimport { Cell } from \"./Cell\";\r\n\r\nexport class Game {\r\n  private score: number = 0;\r\n  private running: boolean = false;\r\n  private grid: Grid;\r\n  private snake: Snake;\r\n  private configuration: Configuration;\r\n  private nextTick: number;\r\n  \r\n\r\n  constructor(configuration: Configuration) {\r\n    this.configuration = configuration;\r\n    this.snake = new Snake();\r\n    this.grid = new Grid(this.configuration);\r\n    this.nextTick = 0;\r\n    this.running = true;\r\n  }\r\n\r\n  getSnake(): Snake {\r\n    return this.snake;\r\n  }\r\n\r\n  getConfiguration() {\r\n    return this.configuration;\r\n  }\r\n\r\n  shouldUpdate(time: number): boolean {\r\n    return this.running && time >= this.nextTick;\r\n  }\r\n\r\n  update(time: number) {\r\n    this.nextTick = time + this.configuration.speed;\r\n\r\n    this.snake.move();\r\n\r\n    switch (this.checkState()) {\r\n      case -1:\r\n        this.die();\r\n        break;\r\n      case 1:\r\n        this.snake.grow();\r\n        this.score += 100;\r\n        this.grid.removeApple(this.snake.getHead());\r\n        if (this.grid.isDone()) {\r\n          this.levelUp();\r\n        }\r\n    }\r\n  }\r\n\r\n  checkState() {\r\n    const cell = this.snake.getHead();\r\n    \r\n    // left the play area or ate itself??\r\n    if (this.isOutside(cell) || this.snake.isSnake(cell)) {\r\n      // dead\r\n      return -1;\r\n    }\r\n\r\n    // ate apple?\r\n    if (this.grid.isAppleInside(cell)) {\r\n      return 1;\r\n    }\r\n\r\n    // nothing special\r\n    return 0;\r\n  }\r\n\r\n  levelUp() {\r\n    this.score += 1000;\r\n    this.configuration.level++;\r\n    if (this.configuration.level < MAX_LEVEL) {\r\n      this.configuration.speed -= 7;\r\n      this.grid.seed();\r\n    } else {\r\n      this.win();\r\n    }\r\n  }\r\n\r\n  win() {\r\n    this.stop();\r\n  }\r\n\r\n  die() {\r\n    this.stop();\r\n  }\r\n\r\n  isOutside(cell: Cell) {\r\n    const { nbCellsX, nbCellsY } = this.configuration;\r\n    return cell.x < 0 || cell.x >= nbCellsX || cell.y < 0 || cell.y >= nbCellsY;\r\n  }\r\n\r\n  getScore(): number {\r\n    return this.score;\r\n  }\r\n\r\n  getGrid(): Grid {\r\n    return this.grid;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n  }\r\n\r\n  getLevel(): number {\r\n    return this.configuration.level;\r\n  }\r\n}\r\n","import {\r\n  Configuration,\r\n  CELLS_HORIZONTAL,\r\n  CELLS_VERTICAL,\r\n  SPEED\r\n} from \"./engine/Configuration\";\r\nimport { Game } from \"./engine/Game\";\r\n\r\nconst CELL_SIZE = 20;\r\nconst SCALE = 2.0;\r\n\r\nclass GameUI {\r\n  private canvas: HTMLCanvasElement;\r\n  private game: Game;\r\n\r\n  constructor(canvas: HTMLCanvasElement, game: Game) {\r\n    this.canvas = canvas;\r\n    this.game = game;\r\n    requestAnimationFrame(this.draw.bind(this));\r\n\r\n    window.addEventListener(\"keydown\", this.onKeyDown.bind(this), false);\r\n    window.focus();\r\n  }\r\n\r\n  draw(time: number) {\r\n    const context = this.canvas.getContext(\"2d\")!;\r\n    if (this.game.shouldUpdate(time)) {\r\n      this.drawBackground(context);\r\n      this.drawGrid(context);\r\n      this.drawBrand(context);\r\n      this.drawScore(context);\r\n      this.drawSnake(context);\r\n      this.drawApples(context);\r\n      this.game.update(time);\r\n    }\r\n    requestAnimationFrame(this.draw.bind(this));\r\n  }\r\n\r\n  drawBackground(context: CanvasRenderingContext2D) {\r\n    const { width, height } = this.game.getConfiguration();\r\n\r\n    context.fillStyle = \"#4caf50\";\r\n    context.fillRect(0, 0, width, height);\r\n  }\r\n\r\n  drawBrand(context: CanvasRenderingContext2D) {\r\n    const { width, height } = this.game.getConfiguration();\r\n\r\n    context.font = height / 2.5 + \"px Roboto\";\r\n    context.textBaseline = \"middle\";\r\n    context.textAlign = \"center\";\r\n    context.fillStyle = \"rgba(255,255,255,0.75)\";\r\n    context.fillText(\"CODELEX\", width / 2, height / 2);\r\n  }\r\n\r\n  drawScore(context: CanvasRenderingContext2D) {\r\n    context.font = 35 * SCALE + \"px Arial\";\r\n    context.textAlign = \"left\";\r\n    context.textBaseline = \"top\";\r\n    context.fillStyle = \"rgba(255,255,255,0.75)\";\r\n    context.fillText(game.getScore().toString(), 10 * SCALE, 10 * SCALE);\r\n  }\r\n\r\n  drawGrid(context: CanvasRenderingContext2D) {\r\n    const game = this.game;\r\n    const { width, height, cellWidth, cellHeight } = game.getConfiguration();\r\n    const lineWidth = 1 * SCALE;\r\n\r\n    context.strokeStyle = \"rgba(255,255,255,0.95)\";\r\n    context.lineWidth = lineWidth;\r\n\r\n    for (let x = 0; x <= width; x += cellWidth) {\r\n      context.beginPath();\r\n      context.moveTo(x, 0);\r\n      context.lineTo(x, height);\r\n      context.stroke();\r\n    }\r\n\r\n    for (let y = 0; y <= height; y += cellHeight) {\r\n      context.beginPath();\r\n      context.moveTo(0, y);\r\n      context.lineTo(width, y);\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  drawApples(context: CanvasRenderingContext2D) {\r\n    const { cellWidth, cellHeight } = game.getConfiguration();\r\n    const lineWidth = 1 * SCALE;\r\n\r\n    context.fillStyle = \"#e91e63\";\r\n    const apples = game.getGrid().getApples();\r\n    apples.forEach(cell =>\r\n      context.fillRect(\r\n        cellWidth * cell.x + lineWidth,\r\n        cellHeight * cell.y + lineWidth,\r\n        cellWidth - lineWidth * 2,\r\n        cellHeight - lineWidth * 2\r\n      )\r\n    );\r\n  }\r\n\r\n  drawSnake(context: CanvasRenderingContext2D) {\r\n    const snake = this.game.getSnake();\r\n    const { cellWidth, cellHeight } = this.game.getConfiguration();\r\n    // head\r\n    const size = (CELL_SIZE * SCALE) / 10;\r\n    const offset = (CELL_SIZE * SCALE) / 3;\r\n    const x = cellWidth * snake.getHead().x;\r\n    const y = cellHeight * snake.getHead().y;\r\n    context.fillStyle = \"#111111\";\r\n    context.fillRect(x, y, cellWidth, cellHeight);\r\n    // eyes\r\n    switch (snake.getDirection()) {\r\n      case \"Up\":\r\n        context.beginPath();\r\n        context.arc(x + offset, y + offset, size, 0, 2 * Math.PI, false);\r\n        context.arc(x + 2 * offset, y + offset, size, 0, 2 * Math.PI, false);\r\n        context.fillStyle = \"white\";\r\n        context.fill();\r\n        break;\r\n      case \"Down\":\r\n        context.beginPath();\r\n        context.arc(x + offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\r\n        context.arc(\r\n          x + 2 * offset,\r\n          y + 2 * offset,\r\n          size,\r\n          0,\r\n          2 * Math.PI,\r\n          false\r\n        );\r\n        context.fillStyle = \"white\";\r\n        context.fill();\r\n        break;\r\n      case \"Right\":\r\n        context.beginPath();\r\n        context.arc(x + 2 * offset, y + offset, size, 0, 2 * Math.PI, false);\r\n        context.arc(\r\n          x + 2 * offset,\r\n          y + 2 * offset,\r\n          size,\r\n          0,\r\n          2 * Math.PI,\r\n          false\r\n        );\r\n        context.fillStyle = \"white\";\r\n        context.fill();\r\n        break;\r\n      case \"Left\":\r\n        context.beginPath();\r\n        context.arc(x + offset, y + offset, size, 0, 2 * Math.PI, false);\r\n        context.arc(x + offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\r\n        context.fillStyle = \"white\";\r\n        context.fill();\r\n        break;\r\n    }\r\n    // tail\r\n    context.fillStyle = \"#333333\";\r\n    const tail = snake.getTail();\r\n    tail.forEach(cell =>\r\n      context.fillRect(\r\n        cellWidth * cell.x,\r\n        cellHeight * cell.y,\r\n        cellWidth,\r\n        cellHeight\r\n      )\r\n    );\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    const snake = this.game.getSnake();\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        event.preventDefault();\r\n        snake.setDirection(\"Up\");\r\n        break;\r\n      case \"ArrowDown\":\r\n        event.preventDefault();\r\n        snake.setDirection(\"Down\");\r\n        break;\r\n      case \"ArrowLeft\":\r\n        event.preventDefault();\r\n        snake.setDirection(\"Left\");\r\n        break;\r\n      case \"ArrowRight\":\r\n        event.preventDefault();\r\n        snake.setDirection(\"Right\");\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nconst createCanvas = (): HTMLCanvasElement => {\r\n  const container = document.getElementById(\"game\")!;\r\n  const canvas = document.createElement(\"Canvas\") as HTMLCanvasElement;\r\n  container.appendChild(canvas);\r\n\r\n  // canvas element size in the page\r\n  canvas.style.width = CELLS_HORIZONTAL * CELL_SIZE + \"px\";\r\n  canvas.style.height = CELLS_VERTICAL * CELL_SIZE + \"px\";\r\n\r\n  // image buffer size\r\n  canvas.width = CELLS_HORIZONTAL * CELL_SIZE * SCALE;\r\n  canvas.height = CELLS_VERTICAL * CELL_SIZE * SCALE;\r\n\r\n  return canvas;\r\n};\r\n\r\nconst createConfiguration = (canvas: HTMLCanvasElement): Configuration => {\r\n  return {\r\n    level: 0,\r\n    speed: SPEED,\r\n    width: canvas.width,\r\n    height: canvas.height,\r\n    nbCellsX: CELLS_HORIZONTAL,\r\n    nbCellsY: CELLS_VERTICAL,\r\n    cellWidth: canvas.width / CELLS_HORIZONTAL,\r\n    cellHeight: canvas.height / CELLS_VERTICAL,\r\n    apples: 5\r\n  };\r\n};\r\n\r\nconst canvas = createCanvas();\r\nconst configuration = createConfiguration(canvas);\r\nconst game = new Game(configuration);\r\n\r\nnew GameUI(canvas, game);\r\n"]}